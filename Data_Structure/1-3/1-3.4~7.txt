/***********************************************************/
// [1-3.4] link에 따라서 각 노드의 정보를 인쇄하도록 함수
/***********************************************************/
/***********************************************************/
// [1-3.5] link에 따라서 주어진 사번에 맞는 노드 를 찾아 주소를 리턴하는 함수
/***********************************************************/
#if 01
int Print_All_Node(SCORE * head)
{
	int i;
	printf("Head.next = %#.8x\n", head->next);
	for (i = 0; i < MAX_ST; i++)
	{
		head = head->next;
		if (head == NULL) break;
		printf("addr=%#.8x, ID=%d, NAME=%s, SCORE=%d, next=%#.8x\n",
			head, head->id, head->name, head->jumsu, head->next);
	}
	return i;
}

SCORE * Search_Id_Node(SCORE * head, int id)
{
	int i;
	for (i = 0; i < MAX_ST; i++)
	{
		head = head->next;
		if ((head == NULL) || (head->id > id)) break;//찾기 실패
		if (head->id == id) return head;//성공
	}
	return NULL;
}
#endif

/***********************************************************/
// [1-3.6] list에 저장된 자료의 총수를 계산하는 함수
/***********************************************************/
#if 01
int Count_Node(SCORE * head)
{
	int i;
	for (i = 0; i < MAX_ST; i++)
	{
		head = head->next;
		if (head == NULL) break;
	}
	return i;
}
#endif

/***********************************************************/
// [1-3.7] link에 따라서 주어진 사번에 맞는 자료를 인쇄하는 함수
/***********************************************************/
#if 01
int Print_Node(SCORE * head, int id)
{
	head = Search_Id_Node(head, id);
	if (head == NULL) return -1;//찾기 실패
	printf("ID=%d, NAME=%s, SCORE=%d, next = 0x%.8X\n", 
		head->id, head->name, head->jumsu, head->next);
	return 1;//성공
}
#endif